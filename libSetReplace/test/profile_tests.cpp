#include <gtest/gtest.h>

#include <utility>
#include <vector>

#include "HypergraphSubstitutionSystem.hpp"

namespace SetReplace {

constexpr auto doNotAbort = []() { return false; };

HypergraphMatcher::OrderingSpec orderingSpec = {
    {HypergraphMatcher::OrderingFunction::SortedInputTokenIndices, HypergraphMatcher::OrderingDirection::Normal},
    {HypergraphMatcher::OrderingFunction::ReverseSortedInputTokenIndices, HypergraphMatcher::OrderingDirection::Normal},
    {HypergraphMatcher::OrderingFunction::InputTokenIndices, HypergraphMatcher::OrderingDirection::Normal},
    {HypergraphMatcher::OrderingFunction::RuleIndex, HypergraphMatcher::OrderingDirection::Normal}};

TEST(HypergraphSubstitutionSystem, profileSingleInputRule) {
  HypergraphSubstitutionSystem system({{{{-1, -2}}, {{-1, -3}, {-1, -3}, {-3, -2}}}},
                                      {{1, 1}},
                                      1,
                                      orderingSpec,
                                      HypergraphMatcher::EventDeduplication::None);
  EXPECT_EQ(system.replace(HypergraphSubstitutionSystem::StepSpecification{1000}, doNotAbort), 1000);
}

TEST(HypergraphSubstitutionSystem, profileMediumRule) {
  HypergraphSubstitutionSystem system(
      {{{{-1, -2, -3}, {-4, -3, -5}, {-3, -6}},
        {{-6, -7, -8}, {-6, -9, -10}, {-11, -8, -10}, {-5, -2, -9}, {-9, -9}, {-1, -9}, {-7, -5}, {-8, -5}}}},
      {{1, 1, 1}, {1, 1, 1}, {1, 1}},
      1,
      orderingSpec,
      HypergraphMatcher::EventDeduplication::None);
  EXPECT_EQ(system.replace(HypergraphSubstitutionSystem::StepSpecification{5000}, doNotAbort), 5000);
}

TEST(HypergraphSubstitutionSystem, profileSequentialRule) {
  HypergraphSubstitutionSystem system({{{{-1, -2, -2}, {-3, -2, -4}}, {{-5, -4, -4}, {-4, -3, -5}, {-3, -5, -1}}}},
                                      {{1, 1, 1}, {1, 1, 1}},
                                      1,
                                      orderingSpec,
                                      HypergraphMatcher::EventDeduplication::None);
  EXPECT_EQ(system.replace(HypergraphSubstitutionSystem::StepSpecification{10000}, doNotAbort), 10000);
}

TEST(HypergraphSubstitutionSystem, profileLargeRule) {
  HypergraphSubstitutionSystem system({{{{-1, -2}, {-2, -1}, {-1, -3}, {-2, -3}, {-3, -1}, {-3, -2}},
                                        {{-1, -2},
                                         {-2, -1},
                                         {-1, -3},
                                         {-2, -3},
                                         {-3, -1},
                                         {-3, -2},
                                         {-1, -4},
                                         {-2, -4},
                                         {-3, -4},
                                         {-4, -1},
                                         {-4, -2},
                                         {-4, -3}}}},
                                      {{1, 1}, {1, 1}, {1, 1}, {1, 1}, {1, 1}, {1, 1}},
                                      1,
                                      orderingSpec,
                                      HypergraphMatcher::EventDeduplication::None);
  EXPECT_EQ(system.replace(HypergraphSubstitutionSystem::StepSpecification{4}, doNotAbort), 4);
}

TEST(HypergraphSubstitutionSystem, profileLargerRule) {
  HypergraphSubstitutionSystem system({{{{-1, -2}, {-2, -1}, {-1, -3}, {-2, -3}, {-3, -1}, {-3, -2}},
                                        {{-1, -2},
                                         {-2, -1},
                                         {-1, -3},
                                         {-2, -3},
                                         {-3, -1},
                                         {-3, -2},
                                         {-1, -4},
                                         {-2, -4},
                                         {-3, -4},
                                         {-4, -1},
                                         {-4, -2},
                                         {-4, -3}}}},
                                      {{1, 1}, {1, 1}, {1, 1}, {1, 1}, {1, 1}, {1, 1}, {1, 1}, {1, 1}, {1, 1}},
                                      1,
                                      orderingSpec,
                                      HypergraphMatcher::EventDeduplication::None);
  EXPECT_EQ(system.replace(HypergraphSubstitutionSystem::StepSpecification{40}, doNotAbort), 40);
}

TEST(HypergraphSubstitutionSystem, profileLevRule) {
  HypergraphSubstitutionSystem system(
      {{{{-1, -2}, {-1, -3}, {-2, -4}}, {{-3, -4}, {-3, -1}, {-4, -2}}}},
      {{1, 2},     {1, 3},     {2, 4},     {3, 5},     {4, 6},     {4, 7},     {6, 8},     {5, 7},     {5, 9},
       {7, 10},    {8, 11},    {8, 12},    {11, 13},   {9, 14},    {10, 12},   {10, 15},   {12, 16},   {13, 17},
       {13, 18},   {17, 19},   {14, 15},   {14, 20},   {15, 21},   {16, 18},   {16, 22},   {18, 23},   {19, 24},
       {19, 25},   {24, 26},   {20, 27},   {21, 22},   {21, 28},   {22, 29},   {23, 25},   {23, 30},   {25, 31},
       {26, 32},   {26, 33},   {32, 34},   {27, 28},   {27, 35},   {28, 36},   {29, 30},   {29, 37},   {30, 38},
       {31, 33},   {31, 39},   {33, 40},   {34, 41},   {34, 42},   {41, 43},   {35, 44},   {36, 37},   {36, 45},
       {37, 46},   {38, 39},   {38, 47},   {39, 48},   {40, 42},   {40, 49},   {42, 50},   {43, 51},   {43, 52},
       {51, 53},   {44, 45},   {44, 54},   {45, 55},   {46, 47},   {46, 56},   {47, 57},   {48, 49},   {48, 58},
       {49, 59},   {50, 52},   {50, 60},   {52, 61},   {53, 62},   {53, 63},   {62, 64},   {54, 65},   {55, 56},
       {55, 66},   {56, 67},   {57, 58},   {57, 68},   {58, 69},   {59, 60},   {59, 70},   {60, 71},   {61, 63},
       {61, 72},   {63, 73},   {64, 74},   {64, 75},   {74, 76},   {65, 66},   {65, 77},   {66, 78},   {67, 68},
       {67, 79},   {68, 80},   {69, 70},   {69, 81},   {70, 82},   {71, 72},   {71, 83},   {72, 84},   {73, 75},
       {73, 85},   {75, 86},   {76, 87},   {77, 88},   {78, 79},   {78, 89},   {79, 90},   {80, 81},   {80, 91},
       {81, 92},   {82, 83},   {82, 93},   {83, 94},   {84, 85},   {84, 95},   {85, 96},   {86, 87},   {86, 97},
       {87, 98},   {88, 89},   {88, 99},   {89, 100},  {90, 91},   {90, 101},  {91, 102},  {92, 93},   {92, 103},
       {93, 104},  {94, 95},   {94, 105},  {95, 106},  {96, 97},   {96, 107},  {97, 108},  {98, 109},  {99, 110},
       {100, 101}, {100, 111}, {101, 112}, {102, 103}, {102, 113}, {103, 114}, {104, 105}, {104, 115}, {105, 116},
       {106, 107}, {106, 117}, {107, 118}, {108, 109}, {108, 119}, {109, 120}, {110, 111}, {110, 121}, {111, 122},
       {112, 113}, {112, 123}, {113, 124}, {114, 115}, {114, 125}, {115, 126}, {116, 117}, {116, 127}, {117, 128},
       {118, 119}, {118, 129}, {119, 130}, {120, 131}, {121, 132}, {122, 123}, {122, 133}, {123, 134}, {124, 125},
       {124, 135}, {125, 136}, {126, 127}, {126, 137}, {127, 138}, {128, 129}, {128, 139}, {129, 140}, {130, 131},
       {130, 141}, {131, 142}, {132, 133}, {132, 143}, {133, 144}, {134, 135}, {134, 145}, {135, 146}, {136, 137},
       {136, 147}, {137, 148}, {138, 139}, {138, 149}, {139, 150}, {140, 141}, {140, 151}, {141, 152}, {142, 153},
       {143, 154}, {144, 145}, {144, 155}, {145, 156}, {146, 147}, {146, 157}, {147, 158}, {148, 149}, {148, 159},
       {149, 160}, {150, 151}, {150, 161}, {151, 162}, {152, 153}, {152, 163}, {153, 164}, {154, 155}, {154, 165},
       {155, 166}, {156, 157}, {156, 167}, {157, 168}, {158, 159}, {158, 169}, {159, 170}, {160, 161}, {160, 171},
       {161, 172}, {162, 163}, {162, 173}, {163, 174}, {164, 175}, {165, 176}, {166, 167}, {166, 177}, {167, 178},
       {168, 169}, {168, 179}, {169, 180}, {170, 171}, {170, 181}, {171, 182}, {172, 173}, {172, 183}, {173, 184},
       {174, 175}, {174, 185}, {175, 186}, {176, 177}, {177, 187}, {178, 179}, {178, 188}, {179, 189}, {180, 181},
       {180, 190}, {181, 191}, {182, 183}, {182, 192}, {183, 193}, {184, 185}, {184, 194}, {185, 195}, {186, 196},
       {187, 188}, {188, 197}, {189, 190}, {189, 198}, {190, 199}, {191, 192}, {191, 200}, {192, 201}, {193, 194},
       {193, 202}, {194, 203}, {195, 196}, {195, 204}, {196, 205}, {197, 198}, {198, 206}, {199, 200}, {199, 207},
       {200, 208}, {201, 202}, {201, 209}, {202, 210}, {203, 204}, {203, 211}, {204, 212}, {205, 213}, {206, 207},
       {207, 214}, {208, 209}, {208, 215}, {209, 216}, {210, 211}, {210, 217}, {211, 218}, {212, 213}, {212, 219},
       {213, 220}, {214, 215}, {215, 221}, {216, 217}, {216, 222}, {217, 223}, {218, 219}, {218, 224}, {219, 225},
       {220, 226}, {221, 222}, {222, 227}, {223, 224}, {223, 228}, {224, 229}, {225, 226}, {225, 230}, {226, 231},
       {227, 228}, {228, 232}, {229, 230}, {229, 233}, {230, 234}, {231, 235}, {232, 233}, {233, 236}, {234, 235},
       {234, 237}, {235, 238}, {236, 237}, {237, 239}, {238, 240}, {239, 240}},
      1,
      orderingSpec,
      HypergraphMatcher::EventDeduplication::None);
  std::cout << system.replace(HypergraphSubstitutionSystem::StepSpecification{4}, doNotAbort);
}

TEST(HypergraphSubstitutionSystem, profileExponentialMatchCountRule) {
  HypergraphSubstitutionSystem system({{{{-1}, {-1}, {-1}}, {{-1}, {-1}, {-1}, {-1}}}},
                                      {{1}, {1}, {1}},
                                      1,
                                      orderingSpec,
                                      HypergraphMatcher::EventDeduplication::None);
  EXPECT_EQ(system.replace(HypergraphSubstitutionSystem::StepSpecification{18}, doNotAbort), 18);
}

TEST(HypergraphSubstitutionSystem, profileCAEmulator) {
  Rule rule1 = {
      {{-18, -18, -3}, {-3, -19, -3}, {-3, -3, -3, -3, -3}},
      {{-1, -1, -1, -12},
       {-1, -1, -14, -1},
       {-1, -10, -10},
       {-1, -1, -5},
       {-5, -5, -5, -5, -5},
       {-5, -4, -5},
       {-1, -19, -1},
       {-1},
       {-4, -12, -12},
       {-4},
       {-17, -14, -14},
       {-17},
       {-18, -18, -17}},
  };

  Rule rule2 = {
      {{-18, -16, -18}, {-16, -16, -20}, {-16, -16}},
      {{-1, -1, -14, -1},
       {-1, -1, -1, -12},
       {-1, -10, -10},
       {-1, -6, -1},
       {-6, -6},
       {-6, -6, -17},
       {-1, -1, -20},
       {-1},
       {-17, -14, -14},
       {-17},
       {-4, -12, -12},
       {-4},
       {-18, -4, -18}},
  };

  Rule rule3 = {
      {{-1, -1, -2},
       {-2, -11, -11},
       {-1, -15, -1},
       {-15, -13, -13},
       {-1, -1, -1, -12},
       {-1, -1, -14, -1},
       {-1, -10, -10},
       {-1, -1, -1, -1, -1, -1},
       {-2, -2, -2, -2, -2, -2},
       {-15, -15, -15, -15, -15, -15}},
      {{-10, -10, -11},
       {-10, -13, -10},
       {-10, -7, -7},
       {-10, -10, -10, -8},
       {-10, -10, -9, -10},
       {-10},
       {-12},
       {-14},
       {-12, -8, -8},
       {-14, -9, -9}},
  };

  Rule rule4 = {
      {{-1, -1, -2},
       {-2, -11, -11},
       {-1, -15, -1},
       {-15, -13, -13},
       {-1, -1, -1, -12},
       {-1, -1, -14, -1},
       {-1, -10, -10},
       {-1, -1, -1, -1, -1, -1},
       {-2, -2, -2, -2, -2, -2},
       {-15}},
      {{-10, -10, -11},
       {-10, -13, -10},
       {-10, -7, -7},
       {-10, -10, -10, -8},
       {-10, -10, -9, -10},
       {-10, -10, -10, -10, -10, -10},
       {-12, -12, -12, -12, -12, -12},
       {-14, -14, -14, -14, -14, -14},
       {-12, -8, -8},
       {-14, -9, -9}},
  };

  Rule rule5 = {
      {{-1, -1, -2},
       {-2, -11, -11},
       {-1, -15, -1},
       {-15, -13, -13},
       {-1, -1, -1, -12},
       {-1, -1, -14, -1},
       {-1, -10, -10},
       {-1},
       {-2, -2, -2, -2, -2, -2},
       {-15, -15, -15, -15, -15, -15}},
      {{-10, -10, -11},
       {-10, -13, -10},
       {-10, -7, -7},
       {-10, -10, -10, -8},
       {-10, -10, -9, -10},
       {-10, -10, -10, -10, -10, -10},
       {-12, -12, -12, -12, -12, -12},
       {-14, -14, -14, -14, -14, -14},
       {-12, -8, -8},
       {-14, -9, -9}},
  };

  Rule rule6 = {
      {{-1, -1, -2},
       {-2, -11, -11},
       {-1, -15, -1},
       {-15, -13, -13},
       {-1, -1, -1, -12},
       {-1, -1, -14, -1},
       {-1, -10, -10},
       {-1},
       {-2, -2, -2, -2, -2, -2},
       {-15}},
      {{-10, -10, -11},
       {-10, -13, -10},
       {-10, -7, -7},
       {-10, -10, -10, -8},
       {-10, -10, -9, -10},
       {-10},
       {-12},
       {-14},
       {-12, -8, -8},
       {-14, -9, -9}},
  };

  Rule rule7 = {
      {{-1, -1, -2},
       {-2, -11, -11},
       {-1, -15, -1},
       {-15, -13, -13},
       {-1, -1, -1, -12},
       {-1, -1, -14, -1},
       {-1, -10, -10},
       {-1, -1, -1, -1, -1, -1},
       {-2},
       {-15, -15, -15, -15, -15, -15}},
      {{-10, -10, -11},
       {-10, -13, -10},
       {-10, -7, -7},
       {-10, -10, -10, -8},
       {-10, -10, -9, -10},
       {-10, -10, -10, -10, -10, -10},
       {-12, -12, -12, -12, -12, -12},
       {-14, -14, -14, -14, -14, -14},
       {-12, -8, -8},
       {-14, -9, -9}},
  };

  Rule rule8 = {
      {{-1, -1, -2},
       {-2, -11, -11},
       {-1, -15, -1},
       {-15, -13, -13},
       {-1, -1, -1, -12},
       {-1, -1, -14, -1},
       {-1, -10, -10},
       {-1, -1, -1, -1, -1, -1},
       {-2},
       {-15}},
      {{-10, -10, -11},
       {-10, -13, -10},
       {-10, -7, -7},
       {-10, -10, -10, -8},
       {-10, -10, -9, -10},
       {-10, -10, -10, -10, -10, -10},
       {-12, -12, -12, -12, -12, -12},
       {-14, -14, -14, -14, -14, -14},
       {-12, -8, -8},
       {-14, -9, -9}},
  };

  Rule rule9 = {{{-1, -1, -2},
                 {-2, -11, -11},
                 {-1, -15, -1},
                 {-15, -13, -13},
                 {-1, -1, -1, -12},
                 {-1, -1, -14, -1},
                 {-1, -10, -10},
                 {-1},
                 {-2},
                 {-15, -15, -15, -15, -15, -15}},
                {{-10, -10, -11},
                 {-10, -13, -10},
                 {-10, -7, -7},
                 {-10, -10, -10, -8},
                 {-10, -10, -9, -10},
                 {-10, -10, -10, -10, -10, -10},
                 {-12, -12, -12, -12, -12, -12},
                 {-14, -14, -14, -14, -14, -14},
                 {-12, -8, -8},
                 {-14, -9, -9}}};

  Rule rule10 = {{{-1, -1, -2},
                  {-2, -11, -11},
                  {-1, -15, -1},
                  {-15, -13, -13},
                  {-1, -1, -1, -12},
                  {-1, -1, -14, -1},
                  {-1, -10, -10},
                  {-1},
                  {-2},
                  {-15}},
                 {{-10, -10, -11},
                  {-10, -13, -10},
                  {-10, -7, -7},
                  {-10, -10, -10, -8},
                  {-10, -10, -9, -10},
                  {-10},
                  {-12},
                  {-14},
                  {-12, -8, -8},
                  {-14, -9, -9}}};

  std::vector<Rule> rules{std::move(rule1),
                          std::move(rule2),
                          std::move(rule3),
                          std::move(rule4),
                          std::move(rule5),
                          std::move(rule6),
                          std::move(rule7),
                          std::move(rule8),
                          std::move(rule9),
                          std::move(rule10)};

  std::vector<AtomsVector> initialTokens = {{3, 3, 3, 6},
                                            {3, 3, 7, 3},
                                            {3, 5, 5},
                                            {3, 3, 1},
                                            {3, 2, 3},
                                            {3, 3, 3, 3, 3, 3},
                                            {4, 6, 6},
                                            {4, 4, 4, 4, 4, 4},
                                            {8, 7, 7},
                                            {8, 8, 8, 8, 8, 8},
                                            {1, 4, 1},
                                            {1, 1, 1, 1, 1},
                                            {2, 2, 8},
                                            {2, 2}};

  HypergraphSubstitutionSystem system(
      rules, initialTokens, 1, orderingSpec, HypergraphMatcher::EventDeduplication::None);
  EXPECT_EQ(system.replace(HypergraphSubstitutionSystem::StepSpecification{250}, doNotAbort), 250);
}

}  // namespace SetReplace
